generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mongodb"
    url      = env("MONGODB_URL")
}

model SiteConfig {
    id          String   @id @default(cuid()) @map("_id")
    siteName    String
    siteUrl     String
    siteLogo    String
    siteFavicon String
    siteDesc    String
    siteAuthor  String
    siteEmail   String
    sitePhone   String
    siteAddress String
    siteCity    String
    siteState   String
    siteZip     String
    siteCountry String
    siteFooter  String
    siteTheme   String
    siteLang    String
    sitePages   String[]
    siteSocial  String[]
    siteMeta    String[]
    siteCustom  String[]
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
}

enum Role {
    USER
    ADMIN
}

enum UserStatus {
    ACTIVE
    INACTIVE
    DISABLED
}

model User {
    id        String     @id @default(auto()) @map("_id") @db.ObjectId
    role      Role       @default(USER)
    createdAt DateTime   @default(now())
    token     String?
    status    UserStatus @default(ACTIVE)

    password String @default("de78570e8ceae914850ff37900a35eed8346ff04cd9afd911b7fc0ce0213b786") //mate2022
    name     String
    class    Int
    grade    Int
    tel      Int?

    createdMusic            Music[]            @relation("CreatedBy")
    likedMusic              Music[]            @relation(fields: [likedMusicIDs], references: [id])
    likedMusicIDs           String[]           @default([]) @db.ObjectId
    createdMusicVoteSession MusicVoteSession[]
}

// Prisma Data Model Documention:
// https://www.prisma.io/docs/concepts/components/prisma-schema/data-model

enum VoteSessionStatus {
    OPEN
    CLOSED
}

model MusicVoteSession {
    id String @id @default(uuid()) @map("_id")

    title       String
    description String
    deadline    DateTime @default(now())
    musics      Music[]
    viewTimes   Int      @default(0)

    status   VoteSessionStatus @default(OPEN)
    author   User?             @relation(fields: [authorId], references: [id])
    authorId String?           @db.ObjectId
}

enum MusicStatus {
    PENDING
    ACTIVE
    DISABLED
}

model Music {
    id        String           @id @default(uuid()) @map("_id") @db.ObjectId
    session   MusicVoteSession @relation(fields: [sessionId], references: [id])
    sessionId String           @unique @db.ObjectId
    status    MusicStatus      @default(ACTIVE)

    creator   User?   @relation(name: "CreatedBy", fields: [creatorId], references: [id])
    creatorId String? @unique @db.ObjectId
    reason    String

    likeNum  Int?     @default(0)
    liker    User[]   @relation(fields: [likerIDs], references: [id])
    likerIDs String[] @db.ObjectId

    title   String
    lyrics  String
    artist  String
    playUrl String?
}
